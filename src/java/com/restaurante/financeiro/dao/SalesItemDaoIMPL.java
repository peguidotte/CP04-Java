package java.com.restaurante.financeiro.dao;

import java.com.restaurante.financeiro.entities.FinancialTransaction;
import java.com.restaurante.financeiro.entities.SalesItem;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class SalesItemDaoImpl implements SalesItemDAO {

    private static final String JDBC_URL = "";
    private static final String JDBC_USER = "USER";
    private static final String JDBC_PASS = "PASS";

    private static final String TABLE = "SALES_ITEM";

    private static final SalesItemDaoImpl INSTANCE = new SalesItemDaoImpl();
    public static SalesItemDaoImpl getInstance() { return INSTANCE; }

    private SalesItemDaoImpl() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            createTableIfNotExists();
        } catch (ClassNotFoundException e) {
            throw new SalesItemException("Oracle JDBC driver not found", e);
        }
    }

    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASS);
    }

    private void createTableIfNotExists() {
        String ddl = """
            CREATE TABLE %s (
              ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
              NAME VARCHAR2(100) NOT NULL,
              CATEGORY VARCHAR2(20) NOT NULL,
              PRICE NUMBER(10,2) NOT NULL,
              AMOUNT NUMBER(10) DEFAULT 0 NOT NULL,
              ACTIVE CHAR(1) DEFAULT 'Y' NOT NULL,
              CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
            )
            """.formatted(TABLE);
        try (Connection c = getConnection(); Statement st = c.createStatement()) {
            st.execute(ddl);
        } catch (SQLException ignored) {
        }
    }

    @Override
    public SalesItem insert(SalesItem item) {
        if (item == null) throw new SalesItemException("Item null");
        item.validate();
        String sql = "INSERT INTO " + TABLE +
                " (NAME, CATEGORY, PRICE, AMOUNT, ACTIVE, CREATED_AT) VALUES (?,?,?,?,?,SYSTIMESTAMP)";
        try (Connection c = getConnection();
             PreparedStatement ps = c.prepareStatement(sql, new String[]{"ID"})) {
            ps.setString(1, item.getName());
            ps.setString(2, item.getCategory().name());
            ps.setDouble(3, item.getPrice());
            ps.setInt(4, item.getAmount());
            ps.setString(5, item.isActive() ? "Y" : "N");
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) item.setId(rs.getLong(1));
            }
            item.setCreatedAt(LocalDateTime.now());
            return item;
        } catch (SQLException e) {
            throw translate("Insert failed", e);
        }
    }

    @Override
    public boolean update(SalesItem item) {
        if (item == null || item.getId() == null)
            throw new SalesItemException("Item or ID null");
        item.validate();
        String sql = "UPDATE " + TABLE + " SET NAME=?, CATEGORY=?, PRICE=?, AMOUNT=?, ACTIVE=? WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, item.getName());
            ps.setString(2, item.getCategory().name());
            ps.setDouble(3, item.getPrice());
            ps.setInt(4, item.getAmount());
            ps.setString(5, item.isActive() ? "Y" : "N");
            ps.setLong(6, item.getId());
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Update failed", e);
        }
    }

    @Override
    public boolean updatePrice(long id, double newPrice) {
        if (newPrice <= 0) throw new SalesItemException("Price must be > 0");
        String sql = "UPDATE " + TABLE + " SET PRICE=? WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setDouble(1, newPrice);
            ps.setLong(2, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Update price failed", e);
        }
    }

    @Override
    public boolean incrementAmount(long id, int delta) {
        if (delta <= 0) throw new SalesItemException("Delta must be > 0");
        String sql = "UPDATE " + TABLE + " SET AMOUNT = AMOUNT + ? WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, delta);
            ps.setLong(2, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Increment amount failed", e);
        }
    }

    @Override
    public boolean setAmount(long id, int amount) {
        if (amount < 0) throw new SalesItemException("Amount must be >= 0");
        String sql = "UPDATE " + TABLE + " SET AMOUNT=? WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setInt(1, amount);
            ps.setLong(2, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Set amount failed", e);
        }
    }

    @Override
    public boolean softDelete(long id) {
        String sql = "UPDATE " + TABLE + " SET ACTIVE='N' WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setLong(1, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Soft delete failed", e);
        }
    }

    @Override
    public boolean delete(long id) {
        String sql = "DELETE FROM " + TABLE + " WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setLong(1, id);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            throw translate("Delete failed", e);
        }
    }

    @Override
    public Optional<SalesItem> findById(long id) {
        String sql = baseSelect() + " WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setLong(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return Optional.of(map(rs));
                return Optional.empty();
            }
        } catch (SQLException e) {
            throw translate("Find by id failed", e);
        }
    }

    @Override
    public List<SalesItem> findAll() {
        String sql = baseSelect() + " ORDER BY NAME";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            List<SalesItem> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        } catch (SQLException e) {
            throw translate("Find all failed", e);
        }
    }

    @Override
    public List<SalesItem> findAllActive() {
        String sql = baseSelect() + " WHERE ACTIVE='Y' ORDER BY NAME";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            List<SalesItem> list = new ArrayList<>();
            while (rs.next()) list.add(map(rs));
            return list;
        } catch (SQLException e) {
            throw translate("Find all active failed", e);
        }
    }

    @Override
    public List<SalesItem> findByCategory(FinancialTransaction.TransactionCategory category) {
        if (category == null) throw new SalesItemException("Category null");
        String sql = baseSelect() + " WHERE CATEGORY=? ORDER BY NAME";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, category.name());
            try (ResultSet rs = ps.executeQuery()) {
                List<SalesItem> list = new ArrayList<>();
                while (rs.next()) list.add(map(rs));
                return list;
            }
        } catch (SQLException e) {
            throw translate("Find by category failed", e);
        }
    }

    @Override
    public List<SalesItem> searchByName(String nameLike) {
        String pattern = nameLike == null ? "%" : "%" + nameLike.toUpperCase() + "%";
        String sql = baseSelect() + " WHERE UPPER(NAME) LIKE ? ORDER BY NAME";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setString(1, pattern);
            try (ResultSet rs = ps.executeQuery()) {
                List<SalesItem> list = new ArrayList<>();
                while (rs.next()) list.add(map(rs));
                return list;
            }
        } catch (SQLException e) {
            throw translate("Search by name failed", e);
        }
    }

    @Override
    public boolean exists(long id) {
        String sql = "SELECT 1 FROM " + TABLE + " WHERE ID=?";
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql)) {
            ps.setLong(1, id);
            try (ResultSet rs = ps.executeQuery()) {
                return rs.next();
            }
        } catch (SQLException e) {
            throw translate("Exists failed", e);
        }
    }

    @Override
    public long count() {
        String sql = "SELECT COUNT(*) FROM " + TABLE;
        try (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql); ResultSet rs = ps.executeQuery()) {
            rs.next();
            return rs.getLong(1);
        } catch (SQLException e) {
            throw translate("Count failed", e);
        }
    }

    private String baseSelect() {
        return "SELECT ID, NAME, CATEGORY, PRICE, AMOUNT, ACTIVE, CREATED_AT FROM " + TABLE;
    }

    private SalesItem map(ResultSet rs) throws SQLException {
        SalesItem item = new SalesItem();
        item.setId(rs.getLong("ID"));
        item.setName(rs.getString("NAME"));
        item.setCategory(FinancialTransaction.TransactionCategory.valueOf(rs.getString("CATEGORY")));
        item.setPrice(rs.getDouble("PRICE"));
        item.setAmount(rs.getInt("AMOUNT"));
        item.setActive("Y".equalsIgnoreCase(rs.getString("ACTIVE")));
        Timestamp created = rs.getTimestamp("CREATED_AT");
        if (created != null) item.setCreatedAt(created.toLocalDateTime());
        return item;
    }

    private SalesItemException translate(String msg, SQLException e) {
        return new SalesItemException(msg + " (SQLState=" + e.getSQLState() +
                " ErrorCode=" + e.getErrorCode() + ")", e);
    }

    public static class SalesItemException extends RuntimeException {
        public SalesItemException(String message) { super(message); }
        public SalesItemException(String message, Throwable cause) { super(message, cause); }
    }
}